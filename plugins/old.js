import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';
import axios from 'axios';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Africa/Nairobi").format("HH:mm:ss");
const xdate = moment.tz("Africa/Nairobi").format("DD/MM/YYYY");
const time2 = moment().tz("Africa/Nairobi").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const menu = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;

  const validCommands = ['inconnu', 'menu', 'bot'];

  if (validCommands.includes(cmd)) {
    const str = `
‚ï≠‚îÄ‚îÄ *‚òâ INCONNU XD V1* ‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è‚îÇ User : *${m.pushName}*
‚îÇ‚ñ´Ô∏è‚îÇ Mode : *${mode}*
‚îÇ‚ñ´Ô∏è‚îÇ Prefix : [${prefix}]
‚îÇ‚ñ´Ô∏è‚îÇ Dev : *INCONNU BOY*
‚îÇ‚ñ´Ô∏è‚îÇ Version : *1.0.0*
‚îÇ‚ñ´Ô∏è‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
> ${pushwish} *${m.pushName}*!

‚ï≠‚îÄ„Äî ‚òâ Download Menu ‚òâ „Äï‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è facebook
‚îÇ‚ñ´Ô∏è pinterestdl
‚îÇ‚ñ´Ô∏è insta
‚îÇ‚ñ´Ô∏è play
‚îÇ‚ñ´Ô∏è song
‚îÇ‚ñ´Ô∏è tiktok
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Converter Menu ‚òâ „Äï‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è ebinary
‚îÇ‚ñ´Ô∏è dbinary
‚îÇ‚ñ´Ô∏è emojimix
‚îÇ‚ñ´Ô∏è mp3
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ AI Menu ‚òâ „Äï‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è ai
‚îÇ‚ñ´Ô∏è bug
‚îÇ‚ñ´Ô∏è report
‚îÇ‚ñ´Ô∏è gpt
‚îÇ‚ñ´Ô∏è dalle
‚îÇ‚ñ´Ô∏è remini
‚îÇ‚ñ´Ô∏è gemini
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Tools Menu ‚òâ „Äï‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è calculator
‚îÇ‚ñ´Ô∏è removebg
‚îÇ‚ñ´Ô∏è tempmail
‚îÇ‚ñ´Ô∏è checkmail
‚îÇ‚ñ´Ô∏è trt
‚îÇ‚ñ´Ô∏è tts
‚îÇ‚ñ´Ô∏è calculater 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Group Menu ‚òâ „Äï‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è linkgc
‚îÇ‚ñ´Ô∏è setname
‚îÇ‚ñ´Ô∏è setdesc
‚îÇ‚ñ´Ô∏è group
‚îÇ‚ñ´Ô∏è groupinfo
‚îÇ‚ñ´Ô∏è gcsetting
‚îÇ‚ñ´Ô∏è welcome
‚îÇ‚ñ´Ô∏è kick
‚îÇ‚ñ´Ô∏è kickall 
‚îÇ‚ñ´Ô∏è demote 
‚îÇ‚ñ´Ô∏è add
‚îÇ‚ñ´Ô∏è promote 
‚îÇ‚ñ´Ô∏è promoteall 
‚îÇ‚ñ´Ô∏è demoteall
‚îÇ‚ñ´Ô∏è gcpp
‚îÇ‚ñ´Ô∏è hidetag 
‚îÇ‚ñ´Ô∏è tagall
‚îÇ‚ñ´Ô∏è antilink
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Search Menu ‚òâ „Äï‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è play
‚îÇ‚ñ´Ô∏è yts
‚îÇ‚ñ´Ô∏è shazam
‚îÇ‚ñ´Ô∏è score
‚îÇ‚ñ´Ô∏è imdb
‚îÇ‚ñ´Ô∏è google / gimage
‚îÇ‚ñ´Ô∏è pinterest
‚îÇ‚ñ´Ô∏è ytsearch
‚îÇ‚ñ´Ô∏è ringtone
‚îÇ‚ñ´Ô∏è lyrics
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Audio Menu ‚òâ „Äï‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è reverse 
‚îÇ‚ñ´Ô∏è smooth
‚îÇ‚ñ´Ô∏è robot
‚îÇ‚ñ´Ô∏è slow 
‚îÇ‚ñ´Ô∏è deep
‚îÇ‚ñ´Ô∏è fast
‚îÇ‚ñ´Ô∏è fat
‚îÇ‚ñ´Ô∏è nightcore
‚îÇ‚ñ´Ô∏è blown
‚îÇ‚ñ´Ô∏è tupai 
‚îÇ‚ñ´Ô∏è earrape 
‚îÇ‚ñ´Ô∏è bass
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Fun Menu ‚òâ „Äï‚îÄ‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è couple
‚îÇ‚ñ´Ô∏è flirt
‚îÇ‚ñ´Ô∏è givetext
‚îÇ‚ñ´Ô∏è emojimix
‚îÇ‚ñ´Ô∏è dbinary
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Main Menu ‚òâ „Äï‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è ping
‚îÇ‚ñ´Ô∏è alive
‚îÇ‚ñ´Ô∏è owner
‚îÇ‚ñ´Ô∏è menu
‚îÇ‚ñ´Ô∏è flirt
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Owner Menu ‚òâ „Äï‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è join
‚îÇ‚ñ´Ô∏è delete 
‚îÇ‚ñ´Ô∏è unblock 
‚îÇ‚ñ´Ô∏è setstatus 
‚îÇ‚ñ´Ô∏è alwaysonline 
‚îÇ‚ñ´Ô∏è autosview
‚îÇ‚ñ´Ô∏è autostatusreply
‚îÇ‚ñ´Ô∏è setstatusmsg
‚îÇ‚ñ´Ô∏è repo
‚îÇ‚ñ´Ô∏è mode  
‚îÇ‚ñ´Ô∏è leave
‚îÇ‚ñ´Ô∏è block
‚îÇ‚ñ´Ô∏è autoread
‚îÇ‚ñ´Ô∏è autotyping
‚îÇ‚ñ´Ô∏è anticall 
‚îÇ‚ñ´Ô∏è leave
‚îÇ‚ñ´Ô∏è setprefix
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
‚ï≠‚îÄ„Äî ‚òâ Stalk Menu ‚òâ „Äï‚îÄ‚îÄ‚òâ
‚îÇ‚ñ´Ô∏è githubstalk
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òâ
> CREATED BY INCONNU BOY`;

    // Check if MENU_IMAGE exists in config and is not empty
    let menuImage;
    if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
      try {
        // Try to fetch the image from URL
        const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
        menuImage = Buffer.from(response.data, 'binary');
      } catch (error) {
        console.error('Error fetching menu image from URL, falling back to local image:', error);
        menuImage = fs.readFileSync('https://files.catbox.moe/230q0c.jpg');
      }
    } else {
      // Use local image if MENU_IMAGE is not configured
      menuImage = fs.readFileSync('https://files.catbox.moe/230q0c.jpg');
    }

    await Matrix.sendMessage(m.from, {
      image: menuImage,
      caption: str,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363397722863547@newsletter',
          newsletterName: "INCONNU XD V1",
          serverMessageId: 143
        }
      }
    }, {
      quoted: m
    });

    // Send audio after sending the menu
    await Matrix.sendMessage(m.from, {
      audio: { url: '' },
      mimetype: 'audio/mp4',
      ptt: true
    }, { quoted: m });
  }
};

export default menu;

